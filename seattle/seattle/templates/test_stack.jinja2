<!DOCTYPE html>
<meta charset="utf-8">
<title>Streamgraph</title>
<style>

body {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  margin: auto;
  position: relative;
  width: 960px;
}

button {
  position: absolute;
  right: 10px;
  top: 10px;
}

</style>
<button onclick="transition()">Update</button>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
// Generate a log-normal distribution with a median of 30 minutes.
var values = {{output}};
var newvalues = [];
// Converting epoch time in input (in days) to Date

for (i = 0; i < values.length; i++) { 
    newvalues.push(new Date(values[i]*1000*60*60*24));
}

// for (i = 0; i < values.length; i++) { 
//     newvalues.push(values[i]*1000*60*60*24);
// }

var ynewvalues = [];
for (i = 0; i < newvalues.length; i++) { 
    ynewvalues.push(1);
}

var newvalues2 = newvalues;
var ynewvalues2 = ynewvalues;


var minDate = newvalues[0];
var maxDate = newvalues[newvalues.length - 1];

v1 = []
for (i = 0; i < newvalues.length; ++i) {
  v1.push({
    'x': newvalues[i],
    'y': ynewvalues[i]
  });
}

v2 = []
for (i = 0; i < newvalues2.length; ++i) {
  v2.push({
    'x': newvalues2[i],
    'y': ynewvalues2[i]
  });
}

var layers = [v1, v2];

var n = 2; // number of layers
var m = newvalues.length; // number of samples per layer
    // stack = d3.layout.stack().offset("wiggle"),
    // layers0 = stack(d3.range(n).map(newvalues)),
    // layers1 = stack(d3.range(n).map(newvalues2));
var stack = d3.layout.stack()
    .offset("wiggle");
var layers0 = stack(layers)
    // .values(layers, function(d) { return d.values; });



var width = 960,
    height = 500;

// var x = d3.scale.linear()
//     .domain([0, m - 1])
//     .range([0, width]);

var x = d3.time.scale()
    .domain([minDate, maxDate])
    .range([0, width]);

var y = d3.scale.linear()
    .domain([0, d3.max(layers0, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); })])
    .range([height, 0]);

var color = d3.scale.linear()
    .range(["#aad", "#556"]);

var area = d3.svg.area()
    .x(function(d) { return x(d.x); })
    .y0(function(d) { return y(d.y0); })
    .y1(function(d) { return y(d.y0 + d.y); });

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.selectAll("path")
    .data(layers0)
    .enter().append("path")
    .attr("d", area)
    .style("fill", function() { return color(Math.random()); });

// function transition() {
//   d3.selectAll("path")
//       .data(function() {
//         var d = layers1;
//         layers1 = layers0;
//         return layers0 = d;
//       })
//     .transition()
//       .duration(2500)
//       .attr("d", area);
// }

// Inspired by Lee Byron's test data generator.
function bumpLayer(n) {

  function bump(a) {
    var x = 1 / (.1 + Math.random()),
        y = 2 * Math.random() - .5,
        z = 10 / (.1 + Math.random());
    for (var i = 0; i < n; i++) {
      var w = (i / n - y) * z;
      a[i] += x * Math.exp(-w * w);
    }
  }

  var a = [], i;
  for (i = 0; i < n; ++i) a[i] = 0;
  for (i = 0; i < 5; ++i) bump(a);
  return a.map(function(d, i) { return {x: i, y: Math.max(0, d)}; });
}

</script>
