<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.bar rect {
  fill: steelblue;
  shape-rendering: crispEdges;
}

.bar text {
  fill: #fff;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

</style>
<body>
<h3>fire:</h3>{{lists.fire}}
<h3>mvi:</h3>{{lists.mvi}}
<h3>crime:</h3>{{lists.crime}}
<h3>fire percentage:</h3>{{percentages.fire}}
<h3>mvi percentage:</h3>{{percentages.mvi}}
<h3>crime percentage:</h3>{{percentages.crime}}

<script src="http://d3js.org/d3.v2.min.js?2.10.0"></script>
<script>

// Generate a log-normal distribution with a median of 30 minutes.
var values = {{lists.fire}};
var newvalues = [];
// Converting epoch time in input (in days) to Date
for (i = 0; i < values.length; i++) { 
    newvalues.push(new Date(values[i]*1000*60*60*24));
}

var minDate = newvalues[0];
var maxDate = newvalues[newvalues.length - 1];
// Number of bins
var bin_number = Math.floor((maxDate - minDate)/(1000*60*60*24));

// Formatters for counts and times (converting numbers to Dates).
var formatCount = d3.format(",.0f");

// setting actual plot size
var margin = {top: 10, right: 30, bottom: 30, left: 30},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

// scale for x axis
var x = d3.time.scale()
    .domain([minDate, maxDate])
    .range([0, width]);

// Generate a histogram using twenty uniformly-spaced bins.
var data = d3.layout.histogram()
    .bins(x.ticks(bin_number))
    (newvalues);

// scale for y axis
var y = d3.scale.linear()
    // finds maximum bin height, and scales the y-axis
    // d.y is the count
    .domain([0, d3.max(data, function(d) { return d.y; })])
    // SVG objects plots start start with origin at upper left
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(4);

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var bar = svg.selectAll(".bar")
    .data(data)
    .enter().append("g")
    .attr("class", "bar")
    .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

bar.append("rect")
    .attr("x", 1)
    .attr("width", x(new Date(data[0].x.getTime() + data[0].dx)))
    .attr("height", function(d) { return height - y(d.y); });

bar.append("text")
    .attr("dy", ".75em")
    .attr("y", 6)
    .attr("x", x(new Date(data[0].dx)) / 2)
    .attr("text-anchor", "middle")
    .text(function(d) { return formatCount(d.y); });

svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis)

svg.append("g")
    .attr("class", "y axis")
    .call(yAxis)
    

</script>
